### 1. Implement the ELF Loader (loader.c)
#### Step a: Open and Read the ELF File

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <elf.h>

void load_and_execute(const char *filename) {
    int fd = open(filename, O_RDONLY);
    if (fd == -1) {
        perror("Error opening file");
        exit(1);
    }
    // Get the size of the ELF file
    off_t file_size = lseek(fd, 0, SEEK_END);
    lseek(fd, 0, SEEK_SET);
    // Read the entire file into memory
    char *file_contents = (char *)malloc(file_size);
    if (read(fd, file_contents, file_size) != file_size) {
        perror("Error reading file");
        exit(1);
    }
    // Close the file
    close(fd);
    // Parse ELF header to find the entry point
    Elf32_Ehdr *elf_header = (Elf32_Ehdr *)file_contents;
    Elf32_Phdr *program_headers = (Elf32_Phdr *)(file_contents + elf_header->e_phoff);
    // Continue with the rest of the steps
    // ...
}

#### Step b: Iterate Through Program Headers
// ...
// After parsing ELF header
for (int i = 0; i < elf_header->e_phnum; i++) {
    if (program_headers[i].p_type == PT_LOAD) {
        // Load the segment into memory using mmap
        void *segment_addr = mmap((void *)program_headers[i].p_vaddr,
                                  program_headers[i].p_memsz,
                                  PROT_READ | PROT_WRITE | PROT_EXEC,
                                  MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,
                                  -1, 0);
        if (segment_addr == MAP_FAILED) {
            perror("Error mapping segment");
            exit(1);
        }
        // Copy segment content from file to memory
        memcpy(segment_addr, file_contents + program_headers[i].p_offset, program_headers[i].p_filesz);
    }
}
#### Step c to e: Find and Execute the Entry Point
// ...
// After loading program headers
void (*entry_point)() = (void (*)())(file_contents + elf_header->e_entry);
entry_point();

### 2. Implement the Launcher (launch.c)
#include <stdio.h>
#include <stdlib.h>
#include <dlfcn.h>
int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <executable>\n", argv[0]);
        return 1;
    }
    // Load the shared library
    void *lib_handle = dlopen("path/to/lib_simpleloader.so", RTLD_LAZY);
    if (!lib_handle) {
        fprintf(stderr, "Error loading library: %s\n", dlerror());
        return 1;
    }
    // Get function pointers to load_and_execute and cleanup
    void (*load_and_execute)(const char *) = dlsym(lib_handle, "load_and_execute");
    void (*cleanup)() = dlsym(lib_handle, "cleanup");
    // Execute the loader
    load_and_execute(argv[1]);
    // Clean up resources
    cleanup();
    dlclose(lib_handle);
    return 0;
}
